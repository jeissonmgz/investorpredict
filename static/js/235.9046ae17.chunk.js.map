{"version":3,"file":"static/js/235.9046ae17.chunk.js","mappings":"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","sources":["utils/regresion.ts","utils/time.ts","pages/CoinPage/components/EstimationCoin.tsx","pages/CoinPage/components/GraphCoin.tsx","pages/CoinPage/CoinPage.tsx","pages/CoinPage/CoinPage.logic.ts","services/client/Http.ts","services/coins/coins.services.ts"],"sourcesContent":["import regression, { DataPoint, Result } from \"regression\";\n\nexport interface IRegresion {\n  name: string;\n  values: number[];\n  reliability: number;\n}\n\nconst arrayToDataPoint = (array: number[][]): DataPoint[] =>\n  array.map((a) => [a[0], a[1]]);\n\nconst linear = (values: number[][]) =>\n  regression.linear(arrayToDataPoint(values));\nconst exponential = (values: number[][]) =>\n  regression.exponential(arrayToDataPoint(values));\nconst logarithmic = (values: number[][]) =>\n  regression.logarithmic(arrayToDataPoint(values));\nconst power = (values: number[][]) =>\n  regression.power(arrayToDataPoint(values));\nconst polynomial = (values: number[][]) =>\n  regression.polynomial(arrayToDataPoint(values));\n\nconst getRegresion = (\n  name: string,\n  result: Result,\n  daysProgresion: number\n): IRegresion => ({\n  name: name,\n  values: [\n    result.predict(daysProgresion)[1],\n    result.predict(daysProgresion + 1)[1],\n    result.predict(daysProgresion + 2)[1],\n    result.predict(daysProgresion + 3)[1],\n    result.predict(daysProgresion + 4)[1],\n    result.predict(daysProgresion + 5)[1],\n    result.predict(daysProgresion + 6)[1],\n  ],\n  reliability: result.r2 * 100,\n});\n\nconst getRegresions = (values: number[][]): IRegresion[] => {\n  const linearMethod = linear(values);\n  const exponentialMethod = exponential(values);\n  const logarithmicMethod = logarithmic(values);\n  const powerMethod = power(values);\n  const polynomialMethod = polynomial(values);\n  const days = values.length;\n  return [\n    getRegresion(\"Linear\", linearMethod, days),\n    getRegresion(\"Exponencial\", exponentialMethod, days),\n    getRegresion(\"Logaritmica\", logarithmicMethod, days),\n    getRegresion(\"Cuadratica\", powerMethod, days),\n    getRegresion(\"Polinomica\", polynomialMethod, days),\n  ];\n};\n\nexport const Regresion = {\n  linear,\n  exponential,\n  logarithmic,\n  power,\n  polynomial,\n  getRegresions,\n};\n","import moment from \"moment\";\n\nconst getNextDays = (daysRequired: number) => {\n  let days: string[] = [];\n\n  for (let i = 1; i <= daysRequired; i++) {\n    days = [...days, moment().add(i, \"days\").format(\"DD/MM/YYYY\")];\n  }\n\n  return days;\n};\n\nexport const Time = {\n  getNextDays,\n};\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { Card } from \"../../../components\";\nimport { GraphLine, IGraphLine } from \"../../../components/Graph/GraphLine\";\nimport { ICoinDollarTime } from \"../../../services\";\nimport { IRegresion, Regresion } from \"../../../utils/regresion\";\nimport { Time } from \"../../../utils/time\";\n\ninterface IEstimationCoin {\n  coinTime: ICoinDollarTime;\n}\n\nconst EstimationCoin = ({ coinTime }: IEstimationCoin) => {\n  const [posibleValue, setPosibleValue] = useState<IRegresion[]>([]);\n  const [graphData, setGraphData] = useState<IGraphLine>();\n  const nextDays = useMemo(() => Time.getNextDays(7), []);\n\n  const colors = useMemo(\n    () => [\"#F272A1\", \"#6D5DA6\", \"#232B59\", \"#60BFBF\", \"#F2958D\", \"#593E25\"],\n    []\n  );\n\n  const valueToday = coinTime.prices[coinTime.prices.length - 1][1];\n  useEffect(() => {\n    const valuesUSD = coinTime.prices.map((c, index) => [index, c[1]]);\n    const regresion = Regresion.getRegresions(valuesUSD).filter(\n      (r) => !isNaN(r.reliability)\n    );\n    setPosibleValue(regresion);\n    setGraphData({\n      name: \"Posibles pronósticos\",\n      labels: nextDays,\n      datasets: regresion.map((r, i) => ({\n        name: `${50 + r.reliability / 2}%`,\n        backgroundColor: colors[i],\n        borderColor: colors[i],\n        values: r.values,\n      })),\n    });\n  }, [coinTime, nextDays, colors]);\n\n  return (\n    <div className=\"estimation_coin\">\n      <h2 className=\"estimation_coin__title\">Pronóstico</h2>\n      <div className=\"estimation_coin__text\">\n        A continuación, te presentamos posibles valores para los próximos 7\n        días, con distintos métodos, cada método tiene un margen de\n        confiabilidad:\n      </div>\n      <div className=\"estimation_coin__text\">\n        <span className=\"estimation_coin__badge\">\n          Valor hoy ${valueToday.toFixed(2)} USD\n        </span>\n      </div>\n      <Card>\n        <>{graphData && <GraphLine {...graphData} />}</>\n      </Card>\n      <div className=\"estimation_coin__container\">\n        <table className=\"estimation_coin__table\">\n          <thead>\n            <tr>\n              <th>Método</th>\n              <th>Confiabilidad</th>\n              {nextDays.map((day) => (\n                <th key={day}>{day}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {posibleValue.map((p) => (\n              <tr key={p.name}>\n                <td>{p.name}</td>\n                <td>{50 + p.reliability / 2}%</td>\n                {p.values.map((v, i) => (\n                  <td key={`${p.name}${v}${i}`}>{v}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default EstimationCoin;\n","import React, { useEffect, useState } from \"react\";\nimport { ICoinDollarTime } from \"../../../services\";\nimport { GraphLine, IGraphLine } from \"../../../components/Graph/GraphLine\";\n\ninterface IGraphCoin {\n  coinTime: ICoinDollarTime;\n}\n\nconst GraphCoin = ({ coinTime }: IGraphCoin): JSX.Element => {\n  const [graphData, setGraphData] = useState<IGraphLine>();\n\n  const updateGraph = (coinPrices: ICoinDollarTime) => {\n    if (coinPrices) {\n      const labelDates = coinPrices.prices.map((c) =>\n        new Date(c[0]).toLocaleDateString()\n      );\n      setGraphData({\n        name: \"Variación en el mercado\",\n        labels: labelDates,\n        datasets: [\n          {\n            name: \"USD\",\n            backgroundColor: \"#3DF29D\",\n            borderColor: \"#3DF29D\",\n            values: coinPrices.prices.map((c) => c[1]),\n          },\n        ],\n      });\n    }\n  };\n\n  useEffect(() => {\n    updateGraph(coinTime);\n  }, [coinTime]);\n\n  return <>{graphData && <GraphLine {...graphData} />}</>;\n};\n\nexport default GraphCoin;\n","import React from \"react\";\nimport { Card, HyperLink } from \"../../components\";\n\nimport { CoinPageLogic } from \"./CoinPage.logic\";\nimport EstimationCoin from \"./components/EstimationCoin\";\nimport GraphCoin from \"./components/GraphCoin\";\n\nconst CoinPage = (): JSX.Element => {\n  const { coin, coinTime } = CoinPageLogic();\n  return (\n    <div className=\"coin_page\">\n      <div className=\"coin_page__header_history\">\n        <header className=\"coin_page__header\">\n          <HyperLink type=\"secundary\" to=\"\">\n            Volver\n          </HyperLink>\n          <div className=\"coin_page__title\">\n            <img\n              className=\"coin_page__title_image\"\n              src={coin?.image.large}\n              alt=\"logo coin\"\n            />\n            <h1 className=\"coin_page__title_text\">{coin?.name}</h1>\n          </div>\n        </header>\n        <section className=\"coin_page__history center_xy\">\n          <Card>\n            <>\n              <h2 className=\"coin_page__subtitle\">Historial</h2>\n              El historial de los últimos 90 días es:\n              {coinTime && <GraphCoin coinTime={coinTime} />}\n            </>\n          </Card>\n        </section>\n      </div>\n      {coinTime && <EstimationCoin coinTime={coinTime} />}\n      <footer className=\"coin_page__footer\">\n        <HyperLink type=\"secundary\" to=\"\">\n          Busca más criptomonedas\n        </HyperLink>\n      </footer>\n    </div>\n  );\n};\n\nexport default CoinPage;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { CoinService, ICoinDetail, ICoinDollarTime } from \"../../services\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { environment } from \"../../environment/environment\";\n\ninterface ICoinPageLogic {\n  coin: ICoinDetail | undefined;\n  coinTime: ICoinDollarTime | undefined;\n}\n\nexport const CoinPageLogic = (): ICoinPageLogic => {\n  const [coin, setCoin] = useState<ICoinDetail>();\n  const { coinId } = useParams();\n  const [coinTime, setCoinTime] = useState<ICoinDollarTime>();\n  const navigate = useNavigate();\n\n  const loadCoinTime = useCallback(async () => {\n    const response = await CoinService.getCoinValueTime(`${coinId}`);\n    setCoinTime(response);\n  }, [coinId]);\n\n  const loadCoinDetail = useCallback(async () => {\n    const response = await CoinService.getCoinDetail(`${coinId}`);\n    setCoin(response);\n  }, [coinId]);\n\n  const loadCoin = useCallback(async () => {\n    try {\n      await loadCoinTime();\n      await loadCoinDetail();\n    } catch (e) {\n      navigate(`/${environment.urlBase}no_encontrado`);\n    }\n  }, [loadCoinTime, loadCoinDetail, navigate]);\n\n  useEffect(() => {\n    if (coinId !== undefined && coinId !== coin?.id) {\n      loadCoin();\n    }\n  }, [coinId, coin?.id, loadCoin]);\n\n  return {\n    coin,\n    coinTime,\n  };\n};\n","const get = <T>(url: string): Promise<T> => {\n  return fetch(url).then((response) => {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json() as Promise<T>;\n  });\n};\n\nexport const Http = {\n  get,\n};\n","import { environment } from \"../../environment/environment\";\nimport { Http } from \"../client/Http\";\nimport { ICoin, ICoinDetail, ICoinDollarTime } from \"../models/coins.models\";\n\nconst getCoins = (): Promise<ICoin[]> => {\n  return Http.get<ICoin[]>(`${environment.urlApi}/coins/list`);\n};\n\nconst getCoinValueTime = (idCoin: string) => {\n  return Http.get<ICoinDollarTime>(\n    `${environment.urlApi}/coins/${idCoin}/market_chart?vs_currency=usd&days=90&interval=daily`\n  );\n};\n\nconst getCoinDetail = (idCoin: string) => {\n  return Http.get<ICoinDetail>(\n    `${environment.urlApi}/coins/${idCoin}?localization=true&tickers=false&market_data=false&community_data=false&developer_data=false&sparkline=false`\n  );\n};\n\nexport const CoinService = {\n  getCoins,\n  getCoinDetail,\n  getCoinValueTime,\n};\n"],"names":["arrayToDataPoint","array","map","a","linear","values","regression","exponential","logarithmic","power","polynomial","getRegresion","name","result","daysProgresion","predict","reliability","r2","Regresion","linearMethod","exponentialMethod","logarithmicMethod","powerMethod","polynomialMethod","days","length","Time","daysRequired","i","moment","add","format","coinTime","useState","posibleValue","setPosibleValue","graphData","setGraphData","nextDays","useMemo","colors","valueToday","prices","useEffect","valuesUSD","c","index","regresion","filter","r","isNaN","labels","datasets","backgroundColor","borderColor","className","toFixed","GraphLine","day","p","v","coinPrices","labelDates","Date","toLocaleDateString","updateGraph","coin","setCoin","coinId","useParams","setCoinTime","navigate","useNavigate","loadCoinTime","useCallback","CoinService","response","loadCoinDetail","loadCoin","environment","undefined","id","CoinPageLogic","type","to","src","image","large","alt","Http","url","fetch","then","ok","Error","statusText","json","getCoins","getCoinDetail","idCoin","getCoinValueTime"],"sourceRoot":""}