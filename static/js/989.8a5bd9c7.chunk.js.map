{"version":3,"file":"static/js/989.8a5bd9c7.chunk.js","mappings":"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","sources":["app/pages/CoinPage/components/EstimationCoin.tsx","app/pages/CoinPage/components/GraphCoin.tsx","app/pages/CoinPage/CoinPage.tsx","app/pages/CoinPage/CoinPage.logic.ts","app/services/client/Http.ts","app/services/coins/coins.services.ts","app/utils/time.ts","app/utils/regresion.ts","core/usecases/getCoinPredictionUseCase.ts","core/models/Constants.ts","core/index.ts","core/usecases/index.ts","core/usecases/getCoinsUseCase.ts","core/usecases/findCoinUseCase.ts"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport { HistoryPrediction } from \"src/core/models\";\nimport { Card } from \"src/app/components\";\nimport { GraphLine, IGraphLine } from \"src/app/components/Graph/GraphLine\";\n\ninterface IEstimationCoin {\n  coinValues: number[];\n  historyPrediction: HistoryPrediction;\n}\n\nconst EstimationCoin = ({ coinValues, historyPrediction }: IEstimationCoin) => {\n  const [graphData, setGraphData] = useState<IGraphLine>();\n  \n  const colors = useMemo(\n    () => [\"#F272A1\", \"#6D5DA6\", \"#232B59\", \"#60BFBF\", \"#F2958D\", \"#593E25\"],\n    []\n  );\n\n  const valueToday = coinValues[coinValues.length - 1];\n  useEffect(() => {\n    setGraphData({\n      name: \"Posibles pronósticos\",\n      labels: historyPrediction.days,\n      datasets: historyPrediction.predictions.map((r, i) => ({\n        name: `${50 + r.reliability / 2}%`,\n        backgroundColor: colors[i],\n        borderColor: colors[i],\n        values: r.values,\n      })),\n    });\n  }, [historyPrediction, colors]);\n\n  return (\n    <div className=\"estimation_coin\">\n      <h2 className=\"estimation_coin__title\">Pronóstico</h2>\n      <div className=\"estimation_coin__text\">\n        A continuación, te presentamos posibles valores para los próximos 7\n        días, con distintos métodos, cada método tiene un margen de\n        confiabilidad:\n      </div>\n      <div className=\"estimation_coin__text\">\n        <span className=\"estimation_coin__badge\">\n          Valor hoy ${valueToday.toFixed(2)} USD\n        </span>\n      </div>\n      <Card>\n        <>{graphData && <GraphLine {...graphData} />}</>\n      </Card>\n      <div className=\"estimation_coin__container\">\n        <table className=\"estimation_coin__table\">\n          <thead>\n            <tr>\n              <th>Método</th>\n              <th>Confiabilidad</th>\n              {historyPrediction.days.map((day) => (\n                <th key={day}>{day}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {historyPrediction.predictions.map((p) => (\n              <tr key={p.nameMethod}>\n                <td>{p.nameMethod}</td>\n                <td>{50 + p.reliability / 2}%</td>\n                {p.values.map((v, i) => (\n                  <td key={`${p.nameMethod}${v}${i}`}>{v}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default EstimationCoin;\n","import React, { useEffect, useState } from \"react\";\nimport { HistoryPrice } from \"src/core/models\";\nimport { GraphLine, IGraphLine } from \"src/app/components/Graph/GraphLine\";\n\ninterface IGraphCoin {\n  coinTime: HistoryPrice[];\n}\n\nconst GraphCoin = ({ coinTime }: IGraphCoin): JSX.Element => {\n  const [graphData, setGraphData] = useState<IGraphLine>();\n\n  const updateGraph = (coinTimeValues: HistoryPrice[]) => {\n    if (coinTimeValues) {\n      const labelDates = coinTimeValues.map(c =>\n        c.day\n      );\n      setGraphData({\n        name: \"Variación en el mercado\",\n        labels: labelDates,\n        datasets: [\n          {\n            name: \"USD\",\n            backgroundColor: \"#3DF29D\",\n            borderColor: \"#3DF29D\",\n            values: coinTimeValues.map(c=> c.value),\n          },\n        ],\n      });\n    }\n  };\n\n  useEffect(() => {\n    updateGraph(coinTime);\n  }, [coinTime]);\n\n  return <>{graphData && <GraphLine {...graphData} />}</>;\n};\n\nexport default GraphCoin;\n","import React from \"react\";\nimport { Card, HyperLink } from \"src/app/components\";\n\nimport { CoinPageLogic } from \"./CoinPage.logic\";\nimport EstimationCoin from \"./components/EstimationCoin\";\nimport GraphCoin from \"./components/GraphCoin\";\n\nconst CoinPage = (): JSX.Element => {\n  const { coin } = CoinPageLogic();\n  return (\n    <div className=\"coin_page\">\n      <div className=\"coin_page__header_history\">\n        <header className=\"coin_page__header\">\n          <HyperLink type=\"secundary\" to={`?search=${coin?.name}`}>\n            Volver\n          </HyperLink>\n          <div className=\"coin_page__title\">\n            <img\n              className=\"coin_page__title_image\"\n              src={coin?.image}\n              alt=\"logo coin\"\n            />\n            <h1 className=\"coin_page__title_text\">{coin?.name}</h1>\n          </div>\n        </header>\n        <section className=\"coin_page__history center_xy\">\n          <Card>\n            <>\n              <h2 className=\"coin_page__subtitle\">Historial</h2>\n              El historial de los últimos 90 días es:\n              {coin?.pricesLastDaysInUSD && <GraphCoin coinTime={coin.pricesLastDaysInUSD} />}\n            </>\n          </Card>\n        </section>\n      </div>\n      {coin?.pricesLastDaysInUSD && coin.predictionsInUSD && <EstimationCoin coinValues={coin.pricesLastDaysInUSD.map(price => price.value)} historyPrediction={coin.predictionsInUSD} />}\n      <footer className=\"coin_page__footer\">\n        <HyperLink type=\"secundary\" to={`?search=${coin?.name}`}>\n          Busca más criptomonedas\n        </HyperLink>\n      </footer>\n    </div>\n  );\n};\n\nexport default CoinPage;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { environment } from \"src/environment/environment\";\nimport { domain } from \"src/core\";\nimport { Coin } from \"src/core/models\";\n\ninterface ICoinPageLogic {\n  coin: Coin | undefined;\n}\n\nexport const CoinPageLogic = (): ICoinPageLogic => {\n  const [coin, setCoin] = useState<Coin>();\n  const { coinId } = useParams();\n  const navigate = useNavigate();\n\n\n  const loadCoin = useCallback(async () => {\n    try {\n      const coinDetails = await domain.getCoinPredictionInUSDUseCase(coinId as string);\n      setCoin(coinDetails);\n    } catch (e) {\n      navigate(`/${environment.urlBase}no_encontrado`);\n    }\n  }, [navigate, coinId]);\n\n  useEffect(() => {\n    if (coinId !== undefined && coinId !== coin?.id) {\n      loadCoin();\n    }\n  }, [coinId, coin?.id, loadCoin]);\n\n  return {\n    coin\n  };\n};\n","const get = <T>(url: string): Promise<T> => {\n  return fetch(url).then((response) => {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json() as Promise<T>;\n  });\n};\n\nexport const Http = {\n  get,\n};\n","import { Coin, HistoryPrice } from \"src/core/models\";\nimport { CoinRepository } from \"src/core/repositories\";\nimport { environment } from \"src/environment/environment\";\nimport { Http } from \"../client/Http\";\nimport { ICoinResponse, ICoinDetailResponse, ICoinDollarTimeResponse } from \"../models/coins.models\";\n\nconst getCoins = async (): Promise<Coin[]> => {\n  const coinsResponse = Http.get<ICoinResponse[]>(`${environment.urlApi}/coins/list`);\n  return (await coinsResponse).map(coinResponse=> coinResponse as Coin)\n};\n\nconst getCoinValuesInUSD = async (idCoin: string): Promise<HistoryPrice[]> => {\n  const coinDollarTime = await Http.get<ICoinDollarTimeResponse>(\n    `${environment.urlApi}/coins/${idCoin}/market_chart?vs_currency=usd&days=90&interval=daily`\n  );\n  return coinDollarTime.prices.map(price => ({\n    day: new Date(price[0]).toLocaleDateString(),\n    value: price[1]\n  }) as HistoryPrice);\n};\n\nconst getCoinDetail = async (idCoin: string): Promise<Coin> => {\n  const coinDetailResponse = await Http.get<ICoinDetailResponse>(\n    `${environment.urlApi}/coins/${idCoin}?localization=true&tickers=false&market_data=false&community_data=false&developer_data=false&sparkline=false`\n  );\n  return {\n    id: coinDetailResponse.id,\n    name: coinDetailResponse.name,\n    symbol: coinDetailResponse.symbol,\n    image: coinDetailResponse.image.large\n  } as Coin;\n};\n\nexport const CoinService: CoinRepository = {\n  getCoins,\n  getCoinDetail,\n  getCoinValuesInUSD,\n};\n","import moment from \"moment\";\n\nconst getNextDays = (daysRequired: number) => {\n  let days: string[] = [];\n\n  for (let i = 1; i <= daysRequired; i++) {\n    days = [...days, moment().add(i, \"days\").format(\"DD/MM/YYYY\")];\n  }\n\n  return days;\n};\n\nexport const Time = {\n  getNextDays,\n};\n","import regression, { DataPoint, Result } from \"regression\";\nimport { Prediction } from \"src/core/models\";\nimport { PredictionRepository } from \"src/core/repositories\";\nimport { Time } from \"./time\";\n  \nconst getDataPoint = (array: number[]): DataPoint[] =>\narray.map((value, index) => [index, value]);\n\nconst getRegressionPromise = (name: string, numberDays:string[], listValues: number[], regressionMethod: (data: DataPoint[])=> Result): Promise<Prediction> => (\n  new Promise((resolve) => {\n    const resultRegresion = regressionMethod(getDataPoint(listValues));\n    const prediction =  {\n      nameMethod: name,\n      values: numberDays.map((_, day) => resultRegresion.predict(day)).map(point=> point[1]),\n      reliability: resultRegresion.r2 * 100\n\n    } as Prediction;\n    resolve(prediction);\n  })\n)\n\nconst getLinearPrediction = (numberDays:string[], listValues: number[]): Promise<Prediction> => \n  getRegressionPromise('lineal', numberDays, listValues, regression.linear);\n\nconst getExponentialPrediction = (numberDays:string[], listValues: number[]): Promise<Prediction> => \n  getRegressionPromise('exponencial', numberDays, listValues, regression.exponential);\n\nconst getLogarithmicPrediction = (numberDays:string[], listValues: number[]): Promise<Prediction> => \n  getRegressionPromise('logaritmico', numberDays, listValues, regression.logarithmic);\n\nconst getPowerPrediction = (numberDays:string[], listValues: number[]): Promise<Prediction> => \n  getRegressionPromise('potencial', numberDays, listValues, regression.power);\n\nconst getPolynomialPrediction = (numberDays:string[], listValues: number[]): Promise<Prediction> => \n  getRegressionPromise('polinomial', numberDays, listValues, regression.polynomial);\n\nconst getDays = Time.getNextDays;\n\n\n\nexport const RegresionUtil: PredictionRepository = {\n  getDays,\n  getLinearPrediction,\n  getExponentialPrediction,\n  getLogarithmicPrediction,\n  getPowerPrediction,\n  getPolynomialPrediction\n};\n","import { HistoryPrediction, NUMBER_DAYS_TO_PREDICT, Prediction } from \"src/core/models\";\nimport { Repository } from \"src/core/repositories\";\n\nconst filterPredictionsWithErrors = (predictions: Prediction[]) => \npredictions.filter(\n    (r) => !isNaN(r.reliability)\n);\n\nexport const getCoinPredictionInUSDUseCase= \n({coinRepository, predictionRepository}: Repository) =>\nasync (idCoin: string)=> {\n    const coin = await coinRepository.getCoinDetail(idCoin);\n    coin.pricesLastDaysInUSD = await coinRepository.getCoinValuesInUSD(idCoin);\n    const valuesPricesLastDaysInUSD = coin.pricesLastDaysInUSD.map(price=> price.value);\n    const days = predictionRepository.getDays(NUMBER_DAYS_TO_PREDICT)\n    const predictions = await Promise.all([\n        predictionRepository.getLinearPrediction(days, valuesPricesLastDaysInUSD),\n        predictionRepository.getExponentialPrediction(days, valuesPricesLastDaysInUSD),\n        predictionRepository.getLogarithmicPrediction(days, valuesPricesLastDaysInUSD),\n        predictionRepository.getPowerPrediction(days, valuesPricesLastDaysInUSD),\n        predictionRepository.getPolynomialPrediction(days, valuesPricesLastDaysInUSD)\n    ]);\n\n    coin.predictionsInUSD = {\n        days,\n        predictions: filterPredictionsWithErrors(predictions)\n    } as HistoryPrediction;\n    return coin;\n}","export const NUMBER_DAYS_TO_PREDICT = 7;","import { CoinService } from \"src/app/services\";\nimport { RegresionUtil } from \"src/app/utils/regresion\";\nimport { Repository } from \"./repositories\";\nimport { mountUseCases } from \"./usecases\";\n\nexport const repositories: Repository = {\n    coinRepository: CoinService,\n    predictionRepository: RegresionUtil\n}\n\n\nexport const domain = mountUseCases(repositories);","import { Repository } from \"src/core/repositories\";\nimport { findCoinUseCase } from \"./findCoinUseCase\";\nimport { getCoinPredictionInUSDUseCase } from \"./getCoinPredictionUseCase\";\nimport { getCoinsUseCase } from \"./getCoinsUseCase\";\n\nexport const mountUseCases = (repository: Repository)=> ({\n    getCoinsUseCase: getCoinsUseCase(repository),\n    getCoinPredictionInUSDUseCase: getCoinPredictionInUSDUseCase(repository),\n    findCoinUseCase: findCoinUseCase()\n})","import { Coin } from \"src/core/models\";\nimport { Repository } from \"src/core/repositories\";\n\nexport const getCoinsUseCase = ({coinRepository}: Repository)=> (): Promise<Coin[]> => {\n    return coinRepository.getCoins();\n}","import { Coin } from \"src/core/models\"\n\nexport const findCoinUseCase = () => (coinName: string, coins: Coin[])=> {\n    if (coinName.length > 0) {\n        return coins.filter((coin) =>\n            coin.name.toLowerCase().startsWith(coinName.toLowerCase())\n        );\n    }\n    return [];\n}"],"names":["_ref","coinValues","historyPrediction","graphData","setGraphData","useState","colors","useMemo","valueToday","length","useEffect","name","labels","days","datasets","predictions","map","r","i","concat","reliability","backgroundColor","borderColor","values","_jsxs","className","children","_jsx","toFixed","Card","_Fragment","GraphLine","day","p","nameMethod","v","coinTime","coinTimeValues","labelDates","c","value","updateGraph","CoinPage","coin","CoinPageLogic","setCoin","coinId","useParams","navigate","useNavigate","loadCoin","useCallback","async","coinDetails","domain","getCoinPredictionInUSDUseCase","e","environment","urlBase","undefined","id","HyperLink","type","to","src","image","alt","pricesLastDaysInUSD","GraphCoin","predictionsInUSD","EstimationCoin","price","Http","url","fetch","then","response","ok","Error","statusText","json","CoinService","getCoins","coinsResponse","urlApi","coinResponse","getCoinDetail","coinDetailResponse","idCoin","symbol","large","getCoinValuesInUSD","prices","Date","toLocaleDateString","getRegressionPromise","numberDays","listValues","regressionMethod","Promise","resolve","resultRegresion","index","_","predict","point","r2","filterPredictionsWithErrors","filter","isNaN","coinRepository","predictionRepository","valuesPricesLastDaysInUSD","getDays","all","getLinearPrediction","getExponentialPrediction","getLogarithmicPrediction","getPowerPrediction","getPolynomialPrediction","getCoinsUseCase","repository","daysRequired","moment","add","format","regression","findCoinUseCase","coinName","coins","toLowerCase","startsWith"],"sourceRoot":""}