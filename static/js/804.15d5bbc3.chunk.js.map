{"version":3,"file":"static/js/804.15d5bbc3.chunk.js","mappings":"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","sources":["app/pages/CoinPage/components/EstimationCoin.tsx","app/pages/CoinPage/components/GraphCoin.tsx","app/pages/CoinPage/CoinPage.tsx","app/pages/CoinPage/CoinPage.logic.ts","core/usecases/index.ts","app/services/client/Http.ts","app/services/coins/coins.services.ts","app/utils/regresion.ts","core/usecases/getCoinPredictionUseCase.ts","core/models/Constants.ts","core/index.ts","core/usecases/getCoinsUseCase.ts","app/utils/time.ts","core/usecases/findCoinUseCase.ts"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport { HistoryPrediction } from \"src/core/models\";\nimport { Card } from \"src/app/components\";\nimport { GraphLine, IGraphLine } from \"src/app/components/Graph/GraphLine\";\n\ninterface IEstimationCoin {\n  coinValues: number[];\n  historyPrediction: HistoryPrediction;\n}\n\nconst EstimationCoin = ({ coinValues, historyPrediction }: IEstimationCoin) => {\n  const [graphData, setGraphData] = useState<IGraphLine>();\n  \n  const colors = useMemo(\n    () => [\"#F272A1\", \"#6D5DA6\", \"#232B59\", \"#60BFBF\", \"#F2958D\", \"#593E25\"],\n    []\n  );\n\n  const valueToday = coinValues[coinValues.length - 1];\n  useEffect(() => {\n    setGraphData({\n      name: \"Posibles pronósticos\",\n      labels: historyPrediction.days,\n      datasets: historyPrediction.predictions.map((r, i) => ({\n        name: `${50 + r.reliability / 2}%`,\n        backgroundColor: colors[i],\n        borderColor: colors[i],\n        values: r.values,\n      })),\n    });\n  }, [historyPrediction, colors]);\n\n  return (\n    <div className=\"estimation_coin\">\n      <h2 className=\"estimation_coin__title\">Pronóstico</h2>\n      <div className=\"estimation_coin__text\">\n        A continuación, te presentamos posibles valores para los próximos 7\n        días, con distintos métodos, cada método tiene un margen de\n        confiabilidad:\n      </div>\n      <div className=\"estimation_coin__text\">\n        <span className=\"estimation_coin__badge\">\n          Valor hoy ${valueToday.toFixed(2)} USD\n        </span>\n      </div>\n      <Card>\n        <>{graphData && <GraphLine {...graphData} />}</>\n      </Card>\n      <div className=\"estimation_coin__container\">\n        <table className=\"estimation_coin__table\">\n          <thead>\n            <tr>\n              <th>Método</th>\n              <th>Confiabilidad</th>\n              {historyPrediction.days.map((day) => (\n                <th key={day}>{day}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {historyPrediction.predictions.map((p) => (\n              <tr key={p.nameMethod}>\n                <td>{p.nameMethod}</td>\n                <td>{50 + p.reliability / 2}%</td>\n                {p.values.map((v, i) => (\n                  <td key={`${p.nameMethod}${v}${i}`}>{v}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default EstimationCoin;\n","import React, { useEffect, useState } from \"react\";\nimport { HistoryPrice } from \"src/core/models\";\nimport { GraphLine, IGraphLine } from \"src/app/components/Graph/GraphLine\";\n\ninterface IGraphCoin {\n  coinTime: HistoryPrice[];\n}\n\nconst GraphCoin = ({ coinTime }: IGraphCoin): JSX.Element => {\n  const [graphData, setGraphData] = useState<IGraphLine>();\n\n  const updateGraph = (coinTimeValues: HistoryPrice[]) => {\n    if (coinTimeValues) {\n      const labelDates = coinTimeValues.map(c =>\n        c.day\n      );\n      setGraphData({\n        name: \"Variación en el mercado\",\n        labels: labelDates,\n        datasets: [\n          {\n            name: \"USD\",\n            backgroundColor: \"#3DF29D\",\n            borderColor: \"#3DF29D\",\n            values: coinTimeValues.map(c=> c.value),\n          },\n        ],\n      });\n    }\n  };\n\n  useEffect(() => {\n    updateGraph(coinTime);\n  }, [coinTime]);\n\n  return <>{graphData && <GraphLine {...graphData} />}</>;\n};\n\nexport default GraphCoin;\n","import React from \"react\";\nimport { Card, HyperLink } from \"src/app/components\";\n\nimport { CoinPageLogic } from \"./CoinPage.logic\";\nimport EstimationCoin from \"./components/EstimationCoin\";\nimport GraphCoin from \"./components/GraphCoin\";\n\nconst CoinPage = (): JSX.Element => {\n  const { coin } = CoinPageLogic();\n  return (\n    <div className=\"coin_page\">\n      <div className=\"coin_page__header_history\">\n        <header className=\"coin_page__header\">\n          <HyperLink type=\"secundary\" to=\"\">\n            Volver\n          </HyperLink>\n          <div className=\"coin_page__title\">\n            <img\n              className=\"coin_page__title_image\"\n              src={coin?.image}\n              alt=\"logo coin\"\n            />\n            <h1 className=\"coin_page__title_text\">{coin?.name}</h1>\n          </div>\n        </header>\n        <section className=\"coin_page__history center_xy\">\n          <Card>\n            <>\n              <h2 className=\"coin_page__subtitle\">Historial</h2>\n              El historial de los últimos 90 días es:\n              {coin?.pricesLastDaysInUSD && <GraphCoin coinTime={coin.pricesLastDaysInUSD} />}\n            </>\n          </Card>\n        </section>\n      </div>\n      {coin?.pricesLastDaysInUSD && coin.predictionsInUSD && <EstimationCoin coinValues={coin.pricesLastDaysInUSD.map(price => price.value)} historyPrediction={coin.predictionsInUSD} />}\n      <footer className=\"coin_page__footer\">\n        <HyperLink type=\"secundary\" to=\"\">\n          Busca más criptomonedas\n        </HyperLink>\n      </footer>\n    </div>\n  );\n};\n\nexport default CoinPage;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { environment } from \"src/environment/environment\";\nimport { domain } from \"src/core\";\nimport { Coin } from \"src/core/models\";\n\ninterface ICoinPageLogic {\n  coin: Coin | undefined;\n}\n\nexport const CoinPageLogic = (): ICoinPageLogic => {\n  const [coin, setCoin] = useState<Coin>();\n  const { coinId } = useParams();\n  const navigate = useNavigate();\n\n\n  const loadCoin = useCallback(async () => {\n    try {\n      const coinDetails = await domain.getCoinPredictionInUSDUseCase(coinId as string);\n      setCoin(coinDetails);\n    } catch (e) {\n      navigate(`/${environment.urlBase}no_encontrado`);\n    }\n  }, [navigate, coinId]);\n\n  useEffect(() => {\n    if (coinId !== undefined && coinId !== coin?.id) {\n      loadCoin();\n    }\n  }, [coinId, coin?.id, loadCoin]);\n\n  return {\n    coin\n  };\n};\n","import { Repository } from \"src/core/repositories\";\nimport { findCoinUseCase } from \"./findCoinUseCase\";\nimport { getCoinPredictionInUSDUseCase } from \"./getCoinPredictionUseCase\";\nimport { getCoinsUseCase } from \"./getCoinsUseCase\";\n\nexport const mountUseCases = (repository: Repository)=> ({\n    getCoinsUseCase: getCoinsUseCase(repository),\n    getCoinPredictionInUSDUseCase: getCoinPredictionInUSDUseCase(repository),\n    findCoinUseCase: findCoinUseCase()\n})","const get = <T>(url: string): Promise<T> => {\n  return fetch(url).then((response) => {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json() as Promise<T>;\n  });\n};\n\nexport const Http = {\n  get,\n};\n","import { Coin, HistoryPrice } from \"src/core/models\";\nimport { CoinRepository } from \"src/core/repositories\";\nimport { environment } from \"src/environment/environment\";\nimport { Http } from \"../client/Http\";\nimport { ICoinResponse, ICoinDetailResponse, ICoinDollarTimeResponse } from \"../models/coins.models\";\n\nconst getCoins = async (): Promise<Coin[]> => {\n  const coinsResponse = Http.get<ICoinResponse[]>(`${environment.urlApi}/coins/list`);\n  return (await coinsResponse).map(coinResponse=> coinResponse as Coin)\n};\n\nconst getCoinValuesInUSD = async (idCoin: string): Promise<HistoryPrice[]> => {\n  const coinDollarTime = await Http.get<ICoinDollarTimeResponse>(\n    `${environment.urlApi}/coins/${idCoin}/market_chart?vs_currency=usd&days=90&interval=daily`\n  );\n  return coinDollarTime.prices.map(price => ({\n    day: new Date(price[0]).toLocaleDateString(),\n    value: price[1]\n  }) as HistoryPrice);\n};\n\nconst getCoinDetail = async (idCoin: string): Promise<Coin> => {\n  const coinDetailResponse = await Http.get<ICoinDetailResponse>(\n    `${environment.urlApi}/coins/${idCoin}?localization=true&tickers=false&market_data=false&community_data=false&developer_data=false&sparkline=false`\n  );\n  return {\n    id: coinDetailResponse.id,\n    name: coinDetailResponse.name,\n    symbol: coinDetailResponse.symbol,\n    image: coinDetailResponse.image.large\n  } as Coin;\n};\n\nexport const CoinService: CoinRepository = {\n  getCoins,\n  getCoinDetail,\n  getCoinValuesInUSD,\n};\n","import regression, { DataPoint, Result } from \"regression\";\nimport { Prediction } from \"src/core/models\";\nimport { PredictionRepository } from \"src/core/repositories\";\nimport { Time } from \"./time\";\n  \nconst getDataPoint = (array: number[]): DataPoint[] =>\narray.map((value, index) => [index, value]);\n\nconst getRegressionPromise = (name: string, numberDays:string[], listValues: number[], regressionMethod: (data: DataPoint[])=> Result): Promise<Prediction> => (\n  new Promise((resolve) => {\n    const resultRegresion = regressionMethod(getDataPoint(listValues));\n    const prediction =  {\n      nameMethod: name,\n      values: numberDays.map((_, day) => resultRegresion.predict(day)).map(point=> point[1]),\n      reliability: resultRegresion.r2 * 100\n\n    } as Prediction;\n    resolve(prediction);\n  })\n)\n\nconst getLinearPrediction = (numberDays:string[], listValues: number[]): Promise<Prediction> => \n  getRegressionPromise('lineal', numberDays, listValues, regression.linear);\n\nconst getExponentialPrediction = (numberDays:string[], listValues: number[]): Promise<Prediction> => \n  getRegressionPromise('exponencial', numberDays, listValues, regression.exponential);\n\nconst getLogarithmicPrediction = (numberDays:string[], listValues: number[]): Promise<Prediction> => \n  getRegressionPromise('logaritmico', numberDays, listValues, regression.logarithmic);\n\nconst getPowerPrediction = (numberDays:string[], listValues: number[]): Promise<Prediction> => \n  getRegressionPromise('potencial', numberDays, listValues, regression.power);\n\nconst getPolynomialPrediction = (numberDays:string[], listValues: number[]): Promise<Prediction> => \n  getRegressionPromise('polinomial', numberDays, listValues, regression.polynomial);\n\nconst getDays = Time.getNextDays;\n\n\n\nexport const RegresionUtil: PredictionRepository = {\n  getDays,\n  getLinearPrediction,\n  getExponentialPrediction,\n  getLogarithmicPrediction,\n  getPowerPrediction,\n  getPolynomialPrediction,\n};\n","import { HistoryPrediction, NUMBER_DAYS_TO_PREDICT, Prediction } from \"src/core/models\";\nimport { Repository } from \"src/core/repositories\";\n\nconst filterPredictionsWithErrors = (predictions: Prediction[]) => \npredictions.filter(\n    (r) => !isNaN(r.reliability)\n);\n\nexport const getCoinPredictionInUSDUseCase= \n({coinRepository, predictionRepository}: Repository) =>\nasync (idCoin: string)=> {\n    const coin = await coinRepository.getCoinDetail(idCoin);\n    coin.pricesLastDaysInUSD = await coinRepository.getCoinValuesInUSD(idCoin);\n    const valuesPricesLastDaysInUSD = coin.pricesLastDaysInUSD.map(price=> price.value);\n    const days = predictionRepository.getDays(NUMBER_DAYS_TO_PREDICT)\n    const predictions = await Promise.all([\n        predictionRepository.getLinearPrediction(days, valuesPricesLastDaysInUSD),\n        predictionRepository.getExponentialPrediction(days, valuesPricesLastDaysInUSD),\n        predictionRepository.getLogarithmicPrediction(days, valuesPricesLastDaysInUSD),\n        predictionRepository.getPowerPrediction(days, valuesPricesLastDaysInUSD),\n        predictionRepository.getPolynomialPrediction(days, valuesPricesLastDaysInUSD)\n    ]);\n\n    coin.predictionsInUSD = {\n        days,\n        predictions: filterPredictionsWithErrors(predictions)\n    } as HistoryPrediction;\n    return coin;\n}","export const NUMBER_DAYS_TO_PREDICT = 7;","import { CoinService } from \"src/app/services\";\nimport { RegresionUtil } from \"src/app/utils/regresion\";\nimport { Repository } from \"./repositories\";\nimport { mountUseCases } from \"./usecases\";\n\nexport const repositories: Repository = {\n    coinRepository: CoinService,\n    predictionRepository: RegresionUtil\n}\n\n\nexport const domain = mountUseCases(repositories);","import { Coin } from \"src/core/models\";\nimport { Repository } from \"src/core/repositories\";\n\nexport const getCoinsUseCase = ({coinRepository}: Repository)=> (): Promise<Coin[]> => {\n    return coinRepository.getCoins();\n}","import moment from \"moment\";\n\nconst getNextDays = (daysRequired: number) => {\n  let days: string[] = [];\n\n  for (let i = 1; i <= daysRequired; i++) {\n    days = [...days, moment().add(i, \"days\").format(\"DD/MM/YYYY\")];\n  }\n\n  return days;\n};\n\nexport const Time = {\n  getNextDays,\n};\n","import { Coin } from \"src/core/models\"\n\nexport const findCoinUseCase = () => (coinName: string, coins: Coin[])=> {\n    if (coinName.length > 0) {\n        return coins.filter((coin) =>\n            coin.name.toLowerCase().startsWith(coinName.toLowerCase())\n        );\n    }\n    return [];\n}"],"names":["coinValues","historyPrediction","useState","graphData","setGraphData","colors","useMemo","valueToday","length","useEffect","name","labels","days","datasets","predictions","map","r","i","reliability","backgroundColor","borderColor","values","className","toFixed","GraphLine","day","p","nameMethod","v","coinTime","coinTimeValues","labelDates","c","value","updateGraph","coin","setCoin","coinId","useParams","navigate","useNavigate","loadCoin","useCallback","domain","coinDetails","environment","undefined","id","CoinPageLogic","type","to","src","image","alt","pricesLastDaysInUSD","predictionsInUSD","price","repository","Http","url","fetch","then","response","ok","Error","statusText","json","getCoins","coinsResponse","coinResponse","getCoinValuesInUSD","idCoin","coinDollarTime","prices","Date","toLocaleDateString","getCoinDetail","coinDetailResponse","symbol","large","CoinService","getRegressionPromise","numberDays","listValues","regressionMethod","Promise","resolve","resultRegresion","index","_","predict","point","r2","filterPredictionsWithErrors","filter","isNaN","getCoinPredictionInUSDUseCase","coinRepository","predictionRepository","valuesPricesLastDaysInUSD","getDays","all","getLinearPrediction","getExponentialPrediction","getLogarithmicPrediction","getPowerPrediction","getPolynomialPrediction","getCoinsUseCase","daysRequired","moment","add","format","regression","findCoinUseCase","coinName","coins","toLowerCase","startsWith"],"sourceRoot":""}